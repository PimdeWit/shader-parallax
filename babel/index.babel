
class Experiment {
  constructor() {
    this.container = null;
    this.renderer = null;
    this.camera = null;
    this.scene = null;
    this.uniforms = {};
  }

  init() {
    this.container = document.getElementById('container');
    this.camera = new THREE.Camera();
    this.camera.position.z = 1;
    this.scene = new THREE.Scene();
    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.container.appendChild(this.renderer.domElement);

    this.uniforms = {
      time: {
        value: 1.0
      },
      resolution: {
        value: new THREE.Vector2()
      },
      pointer: {
        value: new THREE.Vector2()
      }
    };

    this.createShaderViewport();
    this.addEventListeners();
    this.onResize();
    this.animate();
  }

  createShaderViewport() {
    let geometry = new THREE.PlaneBufferGeometry(2, 2);
    let material = new THREE.ShaderMaterial({
      uniforms: this.uniforms,
      vertexShader: document.getElementById('vertexShader').textContent,
      fragmentShader: document.getElementById('fragmentShader').textContent
    });
    let mesh = new THREE.Mesh(geometry, material);
    this.scene.add(mesh);
  }

  addEventListeners() {
    window.addEventListener('resize', this.onResize.bind(this), false);
    window.addEventListener('pointermove', this.onPointerMove.bind(this), false);
  }

  onResize() {
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.uniforms.resolution.value.x = this.renderer.domElement.width;
    this.uniforms.resolution.value.y = this.renderer.domElement.height;
  }

  onPointerMove(event) {
    this.uniforms.pointer.value.x = event.y / window.innerHeight;
    this.uniforms.pointer.value.y = event.x / window.innerWidth;
  }

  animate() {
    requestAnimationFrame(this.animate.bind(this));
    this.render();
  }

  render() {
    this.uniforms.time.value += 0.01;
    this.renderer.render(this.scene, this.camera);
  }
}

let experiment = new Experiment();
experiment.init();
